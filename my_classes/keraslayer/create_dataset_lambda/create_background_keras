#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Mar 22 10:51:05 2024

@author: catarinalopesdias
"""
import tensorflow as tf

def __calc_gauss_function(self, mu, sigma, dim):
        """Calculates a gaussian function (update tensorflow graph).

        Parameters
        ----------
        mu: tuple
            Predefined center of the pdf (x,y,z)
        sigma: float
            Parameter
        dim: tuple
            Dimension of the output (width, height, depth)

        Returns
        -------
        tf tensor
            The desired gaussian function (max value is 1)
        """
        ndim = len(dim)

        linspace = [
            tf.lin_space(0.0, dim[i] - 1.0, dim[i]) for i in range(ndim)
        ]
        coord = tf.meshgrid(*linspace, indexing='ij')

        # center at given point
        coord = [coord[i] - mu[i] for i in range(ndim)]

        # create a matrix of coordinates
        coord_col = tf.stack([tf.reshape(coord[i], [-1]) for i in range(ndim)],
                             axis=1)

        covariance_matrix = tf.linalg.diag(tf.square(sigma))

        z = tf.matmul(coord_col, tf.linalg.inv(covariance_matrix))
        z = tf.reduce_sum(tf.multiply(z, coord_col), axis=1)
        z = tf.exp(-0.5 * z)

        # we dont use the scaling
        #z /= np.sqrt(
        #    (2.0 * np.pi)**len(dim) * np.linalg.det(covariance_matrix))

        # reshape to desired size
        z = tf.reshape(z, dim)

        return z

def apply_random_brain_mask( data):
        """Apply a random brain mask to the data (tensorflow graph update)

        Parameters
        ----------
        data : tf tensor
            Input data of size HxWxD

        Returns
        -------
        tf tensor
            Result of size HxWxD
        tf tensor
            Mask of size HxWxD
        """

        shape = data.get_shape().as_list()
        ndim = len(shape)

        # number of gaussians to be used
        num_gaussians = 20

        # sigma range in terms of percentage wrt the dim
        sigma_range = [0.15, 0.2]

        # init volume
        mask0 = tf.zeros(shape, dtype=tf.bool)

        i0 = tf.constant(0)

        def _cond(i, mask):
            return tf.less(i, num_gaussians)

        def _body(i, mask):

            # create random positions inside dim range (clustered in the center)
            mu = tf.random_normal([ndim],
                                  mean=0.5,
                                  stddev=0.075,
                                  #seed=self.para['seed'] *tf.random.randint(1000)
                                  )
            mu = tf.multiply(mu, shape)
            # create random sigma values
            sigma = tf.stack([
                sigma_range[0] * shape[i] + tf.random_uniform(
                    [], #seed=self.para['seed'] * 
                    np.random.randint(1000)) *
                (sigma_range[1] - sigma_range[0]) * shape[i]
                for i in range(ndim)
            ])

            gauss_function = __calc_gauss_function(mu=mu,
                                                        sigma=sigma,
                                                        dim=shape)

            # update mask
            mask = tf.logical_or(gauss_function > 0.5, mask)

            i += 1
            return (i, mask)

        i, mask = tf.while_loop(_cond,
                                _body,
                                loop_vars=(i0, mask0),
                                parallel_iterations=1,
                                name="brain_mask_loop")

        return tf.multiply(tf.to_float(mask), data), mask




def __data_augmentation_local(#self,
                                  X,
                                  #Y,
                                  #backgroundfield=False,
                                  #sensor_noise=False,
                                  #apply_masking=False,
                                  #wrap_input_data=False
                                  ):
        """To randomly augment the given data (local operations).


        """
        tf_X = tf.constant(X, dtype=tf.float32)
        tf_Y = tf.constant(Y, dtype=tf.float32)

        with tf.name_scope('data_augmentation_local'):

            backgroundfield=True,
            sensor_noise=True,
            apply_masking=True,
            wrap_input_data=True

            boundary_artifacts_mean = 90.0
            boundary_artifacts_std = 10.0


            sensor_noise_mean = 0.0
            sensor_noise_std = 0.03
            
            # set default output values
            X_input = X
            mask = tf.ones_like(X)

            if apply_masking:
                with tf.name_scope('masking_input'):
                    #with self.graph.device('/gpu:' +
                     #                      str(self.para['gpu_ids'][-1])):
                        X_input, mask =  apply_random_brain_mask(X)#self.data.syn_data.

            # add summary for the labels
            #self.add_variable_summaries(X, 'input_without_backgroundfield',
            #                            self.summary_name_scope)
            #self.add_variable_summaries(Y, 'output_labels',
            #                            self.summary_name_scope)

            if backgroundfield:
                with tf.name_scope('backgroundfield'):

                    bgf = tf.zeros_like(mask, dtype=tf.float32)

                    with tf.name_scope('add_z_gradient'):
                        bgf = add_z_gradient( bgf, z_gradient_range)

                    if apply_masking:
                        #self.logger.debug("apply masking")
                        with tf.name_scope('add_boundary_artifacts'):
                            # add boundary artifacts
                            #with self.graph.device(
                            #        '/gpu:' + str(self.para['gpu_ids'][-1])):
                                bgf = add_boundary_artifacts( #self.data.syn_data.
                                    bgf, mask, boundary_artifacts_mean,
                                    boundary_artifacts_std)

                    X = tf.add(X, bgf)

                    # add summary for the labels
                    #self.add_variable_summaries(X,
                    #                            'input_with_backgroundfield',
                    #                            self.summary_name_scope)

            if sensor_noise:
                with tf.name_scope('sensor_noise'):

                    #with self.graph.device('/gpu:' +
                    #                       str(self.para['gpu_ids'][-1])):
                        tf_noise = tf.random_normal(
                            shape=X.get_shape(),
                            mean=sensor_noise_mean,
                            stddev=sensor_noise_std,
                            dtype=tf.float32)
                        X = tf.add(X, tf_noise)

            if wrap_input_data:
                with tf.name_scope('wrap_data'):
                    value_range = 2.0 * np.pi
                    # shift from [-pi,pi] to [0,2*pi]
                    X = tf.add(X, value_range / 2.0)

                    # # calculate wrap counts
                    # self.tensor['wrap_count'] = tf.floor(
                    #     tf.divide(X, value_range))

                    X = tf.mod(X, value_range)

                    # shift back to [-pi,pi]
                    X = tf.subtract(X, value_range / 2.0)

            if apply_masking:
                with tf.name_scope('masking_result'):
                    #with self.graph.device('/gpu:' +
                    #                       str(self.para['gpu_ids'][-1])):
                        X = tf.multiply(tf.to_float(mask), X)
                        Y = tf.multiply(tf.to_float(mask), Y)

        return X, X_input, Y, mask





add_background_field = tf.keras.layers.Lambda(__data_augmentation_local)